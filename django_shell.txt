

python manage.py shell
from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum
from news.models import *

Создать двух пользователей (с помощью метода User.objects.create_user('username'))
u1 = User.objects.create(username='User1')
u2 = User.objects.create(username='User2')

Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(autor_user=u1)
Author.objects.create(autor_user=u2)

Добавить 4 категории в модель Category.

Category.objects.create(name_category='Sport')
Category.objects.create(name_category='Education')
Category.objects.create(name_category='Technologies')
Category.objects.create(name_category='Auto')

Добавить 2 статьи и 1 новость.
au1 = Author.objects.get(id=1)
au2 = Author.objects.get(id=2)
Post.objects.create(author=au1  , category_type= 'AR', title='Про спорт', text='Статья первого автора про спорт')
Post.objects.create(author=au2  , category_type= 'AR', title='Про технологии', text='Статья второго автора про технологии')
Post.objects.create(author=au2  , category_type= 'NW', title='Новость', text='Новости в сфере образования второго автора')

	# Post.objects.get(id=2).preview()

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

Post.objects.get(id=1).post_category.add(Category.objects.get(id=2))
Post.objects.get(id=2).post_category.add(Category.objects.get(id=3))

Создать как минимум 4 комментария к разным объектам модели Post
(в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(comment_post=Post.objects.get(id=1), user_post=Author.objects.get(id=1).autor_user, text='комментарий про спорт к статье первого автора')
Comment.objects.create(comment_post=Post.objects.get(id=1), user_post=Author.objects.get(id=2).autor_user, text='комментарий про технологии к статье второго автора')
Comment.objects.create(comment_post=Post.objects.get(id=2), user_post=Author.objects.get(id=1).autor_user, text='комментарий про спорт к статье первого автора')
Comment.objects.create(comment_post=Post.objects.get(id=2), user_post=Author.objects.get(id=2).autor_user, text='комментарий про технологии к статье второго автора')



Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(id=1).dislike()
Post.objects.get(id=1).like()
Post.objects.get(id=2).like()
Post.objects.get(id=2).dislike()

Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).dislike()

Comment.objects.get(id=3).dislike()
Comment.objects.get(id=3).dislike()

	Comment.objects.get(id=1).comment_rating

Обновить рейтинги пользователей.

a1 = Author.objects.get(id=1)
a1.update_rating()


Вывести username и рейтинг лучшего пользователя

a1.rating_author
a1.post_set.all().values('rating')
a1.autor_user.comment_set.all().values('rating')


a2 = Author.objects.all().order_by('-rating_author')[:1]
a2
for b in a2:
	b.autor_user.username
	b.rating_author




Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

a3 = Post.objects.all().order_by('-rating')[:1]
for j in a3:
	f"Data : {j.data_creations.day}"
	f"Rating: {j.rating}"
	j.author.autor_user
	j.title
	j.preview()


Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

a4 = Comment.objects.all().filter(comment_post=a3)

for d in a4:
	F"Data : {d.data_creation.day}/{d.data_creation.month}/{d.data_creation.year}"
	d.user_post
	F"Rating : {d.comment_rating}"
	d.text
